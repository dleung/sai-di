.content
  .min-height-900
    .fleft = link_to "Back", :back
    .clear
    h2 = @article.title.present? ? @article.title : "[Untitled]"
    .text = @article.body.present? ? @article.body.html_safe : "[No Contents]"
    attachment.clear
      ul.thumbnails
        - @article.article_attachments.sort_by { |obj| obj.created_at }.each do |article_attachment|
          li#gallery
            .thumbnail
              = link_to article_attachment.attachment_url, title: article_attachment.title do
                = image_tag article_attachment.attachment_url(:thumb) if (article_attachment.attachment? && article_attachment.published)
              p.thumbnail_title = article_attachment.title
    - unless @article.coordinates.blank?
      hr
      #map_canvas.fleft
      .map_info.fleft
        h4 = @article.map_title
        p = @article.address
      .clear
      hr
      .clear-space
    .written
      .author
        = @article.created_at.strftime("%r- %D- ")
        = Admin.find(@article.author_id).name
      .tags
        = @article.tags.map {|tag| link_to tag.name.titleize, searches_path(tag_ids: [tag.name], q: "")}.join(", ").html_safe
    hr.thicker
    h3 
      | Comments 
      | (#{@article.comments.not_deleted.size})
    hr
    - @article.comments.order("created_at").each do |comment|
      .comment_container
        .comment_body 
          - if comment.deleted == true
            | Comment had been removed by author
          - else
            = comment.body
        .clear
        .fleft
          .commenter
            | By #{comment.user.name} - 
            = comment.created_at.strftime("%r- %D") if comment.created_at.present?
        - if user_signed_in? && comment.user_id == current_user.id
          .fright
            = link_to "remove", comment_path(id: comment.id, article_id: @article.id), method: :delete, confirm: "Are you sure you want to remove your comment?"
        - comment.replies.each do |reply|
          = reply.body
          = reply.user.name
          = reply.created_at.strftime("%r- %D")
      hr
    - if user_signed_in?
      = simple_form_for Comment.new, url: comments_path(article_id: @article.id, user_id: current_user.id), :html => {:class => "form-vertical well"} do |f|
        = f.input :body, placeholder: "Comment on this article", label: "Comment", required: false
        = f.submit "Add comment", class: "btn btn-info"
    - else
      form.form-vertical.well
        p 
          | You must 
          = link_to "Sign in with google", user_omniauth_authorize_path(:google)
          |  to post comments.
  .clear
  .mouse_back = image_tag('mouse_back.png', size: '48x48')
  span.footer &copy; Capykoa.com 2012


= content_for :scripts do
  javascript:
    $('#map_canvas').gmap(
              { 'center' : "#{@article.coordinates}", 
                'zoom' : 15, 
                'mapTypeControl' : false, 
                'navigationControl' : true,
                'streetViewControl' : false, 
                'callback' : function(map) {
                  var self = this;
                  self.addMarker( {'position': "#{@article.coordinates}" } );

               }
        });
  
  